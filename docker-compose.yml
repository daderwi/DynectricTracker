version: '3.8'

services:
  # PostgreSQL Datenbank
  postgres:
    image: postgres:15-alpine
    container_name: electric_prices_db
    environment:
      POSTGRES_DB: electric_prices
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis für Caching und Message Queue
  redis:
    image: redis:7-alpine
    container_name: electric_prices_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API Server
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: electric_prices_backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/electric_prices
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - ENTSO_E_API_KEY=${ENTSO_E_API_KEY:-}
      - AWATTAR_API_KEY=${AWATTAR_API_KEY:-}
      - TIBBER_API_KEY=${TIBBER_API_KEY:-}
    volumes:
      - ./backend:/app
      - ./frontend:/app/frontend
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Data Collector Worker (Celery)
  collector:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: electric_prices_collector
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/electric_prices
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - ENTSO_E_API_KEY=${ENTSO_E_API_KEY:-}
      - AWATTAR_API_KEY=${AWATTAR_API_KEY:-}
      - TIBBER_API_KEY=${TIBBER_API_KEY:-}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: electric_prices_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: unless-stopped

  # Monitoring mit Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: electric_prices_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    profiles:
      - monitoring
    restart: unless-stopped

  # Prometheus für Metriken (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: electric_prices_prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: electric_prices_network